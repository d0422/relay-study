type Query {
  users: [User]
  getUser(id: ID!): User
  articles(first: Int, after: String): ArticleConnection!
  getArticle(id: ID!): Article!
}

type Mutation {
  createUser(input: UserInput): User
  createArticle(input: ArticleInput): ArticleEdge
  modifyArticle(input: ArticleModifyInput): Article
  likeArticle(articleID: ID!): Article
}

type Article {
  id: ID!
  title: String!
  content: String!
  author: User!
  likeNum: Int
  isLiked: Boolean
}

input ArticleInput {
  title: String!
  content: String!
  userId: String!
}

input ArticleModifyInput {
  id: ID!
  title: String
  content: String
}

type ArticleEdge {
  node: Article!
  cursor: String!
}

type ArticleConnection {
  edges: [ArticleEdge!]!
  pageInfo: PageInfo!
}

type PageInfo {
  startCursor: String
  endCursor: String
  lastCursor: String
  hasNextPage: Boolean
  hasPreviousPage: Boolean
}

type User {
  id: ID!
  name: String!
}

input UserInput {
  name: String!
}
